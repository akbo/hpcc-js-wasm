import{_ as e,c as a,o as t,a as r}from"./app.51745cc0.js";const g=JSON.parse('{"title":"Module: graphviz","description":"","frontmatter":{},"headers":[{"level":2,"title":"Interfaces","slug":"interfaces","link":"#interfaces","children":[]},{"level":2,"title":"Classes","slug":"classes","link":"#classes","children":[]},{"level":2,"title":"Type Aliases","slug":"type-aliases","link":"#type-aliases","children":[{"level":3,"title":"Format","slug":"format","link":"#format","children":[]},{"level":3,"title":"Engine","slug":"engine","link":"#engine","children":[]}]}],"relativePath":"modules/graphviz.md"}'),o={name:"modules/graphviz.md"},i=r('<h1 id="module-graphviz" tabindex="-1">Module: graphviz <a class="header-anchor" href="#module-graphviz" aria-hidden="true">#</a></h1><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-hidden="true">#</a></h2><ul><li><a href="/hpcc-js-wasm/interfaces/graphviz.Image.html">Image</a></li><li><a href="/hpcc-js-wasm/interfaces/graphviz.File.html">File</a></li><li><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html">Options</a></li></ul><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-hidden="true">#</a></h2><ul><li><a href="/hpcc-js-wasm/classes/graphviz.Graphviz.html">Graphviz</a></li></ul><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-hidden="true">#</a></h2><h3 id="format" tabindex="-1">Format <a class="header-anchor" href="#format" aria-hidden="true">#</a></h3><p>\u01AC <strong>Format</strong>: <code>&quot;svg&quot;</code> | <code>&quot;dot&quot;</code> | <code>&quot;json&quot;</code> | <code>&quot;dot_json&quot;</code> | <code>&quot;xdot_json&quot;</code> | <code>&quot;plain&quot;</code> | <code>&quot;plain-ext&quot;</code></p><p>Various graphic and data formats for end user, web, documents and other applications. See <a href="https://graphviz.gitlab.io/docs/outputs/" target="_blank" rel="noreferrer">Output Formats</a> for more information.</p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L7" target="_blank" rel="noreferrer">graphviz.ts:7</a></p><hr><h3 id="engine" tabindex="-1">Engine <a class="header-anchor" href="#engine" aria-hidden="true">#</a></h3><p>\u01AC <strong>Engine</strong>: <code>&quot;circo&quot;</code> | <code>&quot;dot&quot;</code> | <code>&quot;fdp&quot;</code> | <code>&quot;sfdp&quot;</code> | <code>&quot;neato&quot;</code> | <code>&quot;osage&quot;</code> | <code>&quot;patchwork&quot;</code> | <code>&quot;twopi&quot;</code></p><p>Various algorithms for projecting abstract graphs into a space for visualization. See <a href="https://graphviz.gitlab.io/docs/layouts/" target="_blank" rel="noreferrer">Layout Engines</a> for more details.</p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L12" target="_blank" rel="noreferrer">graphviz.ts:12</a></p>',17),s=[i];function n(d,c,h,l,p,u){return t(),a("div",null,s)}const m=e(o,[["render",n]]);export{g as __pageData,m as default};
