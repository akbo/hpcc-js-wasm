import{_ as e,c as s,o as a,a as t}from"./app.51745cc0.js";const f=JSON.parse('{"title":"Class: Zstd","description":"","frontmatter":{},"headers":[{"level":2,"title":"Hierarchy","slug":"hierarchy","link":"#hierarchy","children":[]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"load","slug":"load","link":"#load","children":[]},{"level":3,"title":"version","slug":"version","link":"#version","children":[]},{"level":3,"title":"compress","slug":"compress","link":"#compress","children":[]},{"level":3,"title":"decompress","slug":"decompress","link":"#decompress","children":[]},{"level":3,"title":"defaultCLevel","slug":"defaultclevel","link":"#defaultclevel","children":[]},{"level":3,"title":"minCLevel","slug":"minclevel","link":"#minclevel","children":[]},{"level":3,"title":"maxCLevel","slug":"maxclevel","link":"#maxclevel","children":[]}]}],"relativePath":"classes/zstd.Zstd.md"}'),r={name:"classes/zstd.Zstd.md"},n=t(`<h1 id="class-zstd" tabindex="-1">Class: Zstd <a class="header-anchor" href="#class-zstd" aria-hidden="true">#</a></h1><p><a href="/hpcc-js-wasm/modules/zstd.html">zstd</a>.Zstd</p><p>The Zstandard WASM library, provides a simplified wrapper around the Zstandard c++ library.</p><p>See <a href="https://facebook.github.io/zstd/" target="_blank" rel="noreferrer">Zstandard</a> for more details.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Zstd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@hpcc-js/wasm/zstd</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> zstd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">await</span><span style="color:#A6ACCD;"> Zstd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">//  Generate some &quot;data&quot;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#A6ACCD;">(Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">length</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">256</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> compressed_data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> zstd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compress</span><span style="color:#A6ACCD;">(data)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> decompressed_data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> zstd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decompress</span><span style="color:#A6ACCD;">(compressed_data)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="hierarchy" tabindex="-1">Hierarchy <a class="header-anchor" href="#hierarchy" aria-hidden="true">#</a></h2><ul><li><p><a href="/hpcc-js-wasm/classes/wasm_library.WasmLibrary.html"><code>WasmLibrary</code></a></p><p>\u21B3 <strong><code>Zstd</code></strong></p></li></ul><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="load" tabindex="-1">load <a class="header-anchor" href="#load" aria-hidden="true">#</a></h3><p>\u25B8 <code>Static</code> <strong>load</strong>(): <code>Promise</code>&lt;<a href="/hpcc-js-wasm/classes/zstd.Zstd.html"><code>Zstd</code></a>&gt;</p><p>Compiles and instantiates the raw wasm.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>In general WebAssembly compilation is disallowed on the main thread if the buffer size is larger than 4KB, hence forcing <code>load</code> to be asynchronous;</p></div><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h4><p><code>Promise</code>&lt;<a href="/hpcc-js-wasm/classes/zstd.Zstd.html"><code>Zstd</code></a>&gt;</p><p>A promise to an instance of the Zstd class.</p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/zstd.ts#L42" target="_blank" rel="noreferrer">zstd.ts:42</a></p><hr><h3 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-hidden="true">#</a></h3><p>\u25B8 <strong>version</strong>(): <code>string</code></p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-hidden="true">#</a></h4><p><code>string</code></p><p>The Zstd c++ version</p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/zstd.ts#L54" target="_blank" rel="noreferrer">zstd.ts:54</a></p><hr><h3 id="compress" tabindex="-1">compress <a class="header-anchor" href="#compress" aria-hidden="true">#</a></h3><p>\u25B8 <strong>compress</strong>(<code>data</code>, <code>compressionLevel?</code>): <code>Uint8Array</code></p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>data</code></td><td style="text-align:left;"><code>Uint8Array</code></td><td style="text-align:left;">Data to be compressed</td></tr><tr><td style="text-align:left;"><code>compressionLevel</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Compression v Speed tradeoff, when omitted it will default to <code>zstd.defaultCLevel()</code> which is currently 3.</td></tr></tbody></table><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-hidden="true">#</a></h4><p><code>Uint8Array</code></p><p>Compressed data.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>A note on compressionLevel: The library supports regular compression levels from 1 up o 22. Levels &gt;= 20, should be used with caution, as they require more memory. The library also offers negative compression levels, which extend the range of speed vs. ratio preferences. The lower the level, the faster the speed (at the cost of compression).</p></div><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/zstd.ts#L67" target="_blank" rel="noreferrer">zstd.ts:67</a></p><hr><h3 id="decompress" tabindex="-1">decompress <a class="header-anchor" href="#decompress" aria-hidden="true">#</a></h3><p>\u25B8 <strong>decompress</strong>(<code>compressedData</code>): <code>Uint8Array</code></p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>compressedData</code></td><td style="text-align:left;"><code>Uint8Array</code></td><td style="text-align:left;">Data to be compressed</td></tr></tbody></table><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-hidden="true">#</a></h4><p><code>Uint8Array</code></p><p>Uncompressed data.</p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/zstd.ts#L87" target="_blank" rel="noreferrer">zstd.ts:87</a></p><hr><h3 id="defaultclevel" tabindex="-1">defaultCLevel <a class="header-anchor" href="#defaultclevel" aria-hidden="true">#</a></h3><p>\u25B8 <strong>defaultCLevel</strong>(): <code>number</code></p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-hidden="true">#</a></h4><p><code>number</code></p><p>Default compression level (see notes above above).</p><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/zstd.ts#L109" target="_blank" rel="noreferrer">zstd.ts:109</a></p><hr><h3 id="minclevel" tabindex="-1">minCLevel <a class="header-anchor" href="#minclevel" aria-hidden="true">#</a></h3><p>\u25B8 <strong>minCLevel</strong>(): <code>number</code></p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-hidden="true">#</a></h4><p><code>number</code></p><h4 id="defined-in-5" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/zstd.ts#L113" target="_blank" rel="noreferrer">zstd.ts:113</a></p><hr><h3 id="maxclevel" tabindex="-1">maxCLevel <a class="header-anchor" href="#maxclevel" aria-hidden="true">#</a></h3><p>\u25B8 <strong>maxCLevel</strong>(): <code>number</code></p><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-hidden="true">#</a></h4><p><code>number</code></p><h4 id="defined-in-6" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/zstd.ts#L117" target="_blank" rel="noreferrer">zstd.ts:117</a></p>`,68),l=[n];function o(d,c,p,i,h,m){return a(),s("div",null,l)}const u=e(r,[["render",o]]);export{f as __pageData,u as default};
