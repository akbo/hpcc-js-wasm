import{_ as t,c as e,o as a,a as o}from"./app.51745cc0.js";const u=JSON.parse('{"title":"Class: Graphviz","description":"","frontmatter":{},"headers":[{"level":3,"title":"Online Demos","slug":"online-demos","link":"#online-demos","children":[]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"load","slug":"load","link":"#load","children":[]},{"level":3,"title":"version","slug":"version","link":"#version","children":[]},{"level":3,"title":"layout","slug":"layout","link":"#layout","children":[]},{"level":3,"title":"circo","slug":"circo","link":"#circo","children":[]},{"level":3,"title":"dot","slug":"dot","link":"#dot","children":[]},{"level":3,"title":"fdp","slug":"fdp","link":"#fdp","children":[]},{"level":3,"title":"sfdp","slug":"sfdp","link":"#sfdp","children":[]},{"level":3,"title":"neato","slug":"neato","link":"#neato","children":[]},{"level":3,"title":"osage","slug":"osage","link":"#osage","children":[]},{"level":3,"title":"patchwork","slug":"patchwork","link":"#patchwork","children":[]},{"level":3,"title":"twopi","slug":"twopi","link":"#twopi","children":[]}]}],"relativePath":"classes/graphviz.Graphviz.md"}'),r={name:"classes/graphviz.Graphviz.md"},d=o(`<h1 id="class-graphviz" tabindex="-1">Class: Graphviz <a class="header-anchor" href="#class-graphviz" aria-hidden="true">#</a></h1><p><a href="/hpcc-js-wasm/modules/graphviz.html">graphviz</a>.Graphviz</p><p>The Graphviz layout algorithms take descriptions of graphs in a simple text language, and make diagrams in useful formats, such as images and SVG for web pages or display in an interactive graph browser.</p><p>Graphviz has many useful features for concrete diagrams, such as options for colors, fonts, tabular node layouts, line styles, hyperlinks, and custom shapes.</p><p>See <a href="https://graphviz.org/" target="_blank" rel="noreferrer">graphviz.org</a> for more details.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Graphviz</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@hpcc-js/wasm/graphviz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> graphviz </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">await</span><span style="color:#A6ACCD;"> Graphviz</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">digraph G { Hello -&gt; World }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> svg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> graphviz</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dot</span><span style="color:#A6ACCD;">(dot)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="online-demos" tabindex="-1">Online Demos <a class="header-anchor" href="#online-demos" aria-hidden="true">#</a></h3><ul><li><a href="https://raw.githack.com/hpcc-systems/hpcc-js-wasm/trunk/index.html" target="_blank" rel="noreferrer">https://raw.githack.com/hpcc-systems/hpcc-js-wasm/trunk/index.html</a></li><li><a href="https://observablehq.com/@gordonsmith/graphviz" target="_blank" rel="noreferrer">https://observablehq.com/@gordonsmith/graphviz</a></li></ul><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="load" tabindex="-1">load <a class="header-anchor" href="#load" aria-hidden="true">#</a></h3><p>\u25B8 <code>Static</code> <strong>load</strong>(): <code>Promise</code>&lt;<a href="/hpcc-js-wasm/classes/graphviz.Graphviz.html"><code>Graphviz</code></a>&gt;</p><p>Compiles and instantiates the raw wasm.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>In general WebAssembly compilation is disallowed on the main thread if the buffer size is larger than 4KB, hence forcing <code>load</code> to be asynchronous;</p></div><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h4><p><code>Promise</code>&lt;<a href="/hpcc-js-wasm/classes/graphviz.Graphviz.html"><code>Graphviz</code></a>&gt;</p><p>A promise to an instance of the Graphviz class.</p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L107" target="_blank" rel="noreferrer">graphviz.ts:107</a></p><hr><h3 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-hidden="true">#</a></h3><p>\u25B8 <strong>version</strong>(): <code>string</code></p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-hidden="true">#</a></h4><p><code>string</code></p><p>The Graphviz c++ version</p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L116" target="_blank" rel="noreferrer">graphviz.ts:116</a></p><hr><h3 id="layout" tabindex="-1">layout <a class="header-anchor" href="#layout" aria-hidden="true">#</a></h3><p>\u25B8 <strong>layout</strong>(<code>dotSource</code>, <code>outputFormat?</code>, <code>layoutEngine?</code>, <code>options?</code>): <code>string</code></p><p>Performs layout for the supplied <em>dotSource</em>, see <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">The DOT Language</a> for specification.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dotSource</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Required - graph definition in <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">DOT</a> language</td></tr><tr><td style="text-align:left;"><code>outputFormat</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#format"><code>Format</code></a></td><td style="text-align:left;"><code>&quot;svg&quot;</code></td><td style="text-align:left;">The format of the result.</td></tr><tr><td style="text-align:left;"><code>layoutEngine</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#engine"><code>Engine</code></a></td><td style="text-align:left;"><code>&quot;dot&quot;</code></td><td style="text-align:left;">The type of layout to perform.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html"><code>Options</code></a></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Advanced Options for images, files, yInvert and nop.</td></tr></tbody></table><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-hidden="true">#</a></h4><p><code>string</code></p><p>A string containing the calculated layout in the format specified by <code>outputFormat</code></p><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L128" target="_blank" rel="noreferrer">graphviz.ts:128</a></p><hr><h3 id="circo" tabindex="-1">circo <a class="header-anchor" href="#circo" aria-hidden="true">#</a></h3><p>\u25B8 <strong>circo</strong>(<code>dotSource</code>, <code>outputFormat?</code>, <code>options?</code>): <code>string</code></p><p>Convenience function that performs the <strong>circo</strong> layout, is equivalent to <code>layout(dotSource, outputFormat, &quot;circo&quot;);</code>.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dotSource</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Required - graph definition in <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">DOT</a> language</td></tr><tr><td style="text-align:left;"><code>outputFormat</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#format"><code>Format</code></a></td><td style="text-align:left;"><code>&quot;svg&quot;</code></td><td style="text-align:left;">The format of the result.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html"><code>Options</code></a></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Advanced Options for images, files, yInvert and nop.</td></tr></tbody></table><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-hidden="true">#</a></h4><p><code>string</code></p><p>A string containing the calculated layout in the format specified by <code>outputFormat</code></p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L155" target="_blank" rel="noreferrer">graphviz.ts:155</a></p><hr><h3 id="dot" tabindex="-1">dot <a class="header-anchor" href="#dot" aria-hidden="true">#</a></h3><p>\u25B8 <strong>dot</strong>(<code>dotSource</code>, <code>outputFormat?</code>, <code>options?</code>): <code>string</code></p><p>Convenience function that performs the <strong>dot</strong> layout, is equivalent to <code>layout(dotSource, outputFormat, &quot;dot&quot;);</code>.</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dotSource</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Required - graph definition in <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">DOT</a> language</td></tr><tr><td style="text-align:left;"><code>outputFormat</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#format"><code>Format</code></a></td><td style="text-align:left;"><code>&quot;svg&quot;</code></td><td style="text-align:left;">The format of the result.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html"><code>Options</code></a></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Advanced Options for images, files, yInvert and nop.</td></tr></tbody></table><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-hidden="true">#</a></h4><p><code>string</code></p><p>A string containing the calculated layout in the format specified by <code>outputFormat</code></p><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L167" target="_blank" rel="noreferrer">graphviz.ts:167</a></p><hr><h3 id="fdp" tabindex="-1">fdp <a class="header-anchor" href="#fdp" aria-hidden="true">#</a></h3><p>\u25B8 <strong>fdp</strong>(<code>dotSource</code>, <code>outputFormat?</code>, <code>options?</code>): <code>string</code></p><p>Convenience function that performs the <strong>fdp</strong> layout, is equivalent to <code>layout(dotSource, outputFormat, &quot;fdp&quot;);</code>.</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dotSource</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Required - graph definition in <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">DOT</a> language</td></tr><tr><td style="text-align:left;"><code>outputFormat</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#format"><code>Format</code></a></td><td style="text-align:left;"><code>&quot;svg&quot;</code></td><td style="text-align:left;">The format of the result.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html"><code>Options</code></a></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Advanced Options for images, files, yInvert and nop.</td></tr></tbody></table><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-hidden="true">#</a></h4><p><code>string</code></p><p>A string containing the calculated layout in the format specified by <code>outputFormat</code></p><h4 id="defined-in-5" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L179" target="_blank" rel="noreferrer">graphviz.ts:179</a></p><hr><h3 id="sfdp" tabindex="-1">sfdp <a class="header-anchor" href="#sfdp" aria-hidden="true">#</a></h3><p>\u25B8 <strong>sfdp</strong>(<code>dotSource</code>, <code>outputFormat?</code>, <code>options?</code>): <code>string</code></p><p>Convenience function that performs the <strong>sfdp</strong> layout, is equivalent to <code>layout(dotSource, outputFormat, &quot;sfdp&quot;);</code>.</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dotSource</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Required - graph definition in <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">DOT</a> language</td></tr><tr><td style="text-align:left;"><code>outputFormat</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#format"><code>Format</code></a></td><td style="text-align:left;"><code>&quot;svg&quot;</code></td><td style="text-align:left;">The format of the result.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html"><code>Options</code></a></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Advanced Options for images, files, yInvert and nop.</td></tr></tbody></table><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-hidden="true">#</a></h4><p><code>string</code></p><p>A string containing the calculated layout in the format specified by <code>outputFormat</code></p><h4 id="defined-in-6" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L191" target="_blank" rel="noreferrer">graphviz.ts:191</a></p><hr><h3 id="neato" tabindex="-1">neato <a class="header-anchor" href="#neato" aria-hidden="true">#</a></h3><p>\u25B8 <strong>neato</strong>(<code>dotSource</code>, <code>outputFormat?</code>, <code>options?</code>): <code>string</code></p><p>Convenience function that performs the <strong>neato</strong> layout, is equivalent to <code>layout(dotSource, outputFormat, &quot;neato&quot;);</code>.</p><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dotSource</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Required - graph definition in <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">DOT</a> language</td></tr><tr><td style="text-align:left;"><code>outputFormat</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#format"><code>Format</code></a></td><td style="text-align:left;"><code>&quot;svg&quot;</code></td><td style="text-align:left;">The format of the result.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html"><code>Options</code></a></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Advanced Options for images, files, yInvert and nop.</td></tr></tbody></table><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-hidden="true">#</a></h4><p><code>string</code></p><p>A string containing the calculated layout in the format specified by <code>outputFormat</code></p><h4 id="defined-in-7" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L203" target="_blank" rel="noreferrer">graphviz.ts:203</a></p><hr><h3 id="osage" tabindex="-1">osage <a class="header-anchor" href="#osage" aria-hidden="true">#</a></h3><p>\u25B8 <strong>osage</strong>(<code>dotSource</code>, <code>outputFormat?</code>, <code>options?</code>): <code>string</code></p><p>Convenience function that performs the <strong>osage</strong> layout, is equivalent to <code>layout(dotSource, outputFormat, &quot;osage&quot;);</code>.</p><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dotSource</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Required - graph definition in <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">DOT</a> language</td></tr><tr><td style="text-align:left;"><code>outputFormat</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#format"><code>Format</code></a></td><td style="text-align:left;"><code>&quot;svg&quot;</code></td><td style="text-align:left;">The format of the result.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html"><code>Options</code></a></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Advanced Options for images, files, yInvert and nop.</td></tr></tbody></table><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-hidden="true">#</a></h4><p><code>string</code></p><p>A string containing the calculated layout in the format specified by <code>outputFormat</code></p><h4 id="defined-in-8" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L215" target="_blank" rel="noreferrer">graphviz.ts:215</a></p><hr><h3 id="patchwork" tabindex="-1">patchwork <a class="header-anchor" href="#patchwork" aria-hidden="true">#</a></h3><p>\u25B8 <strong>patchwork</strong>(<code>dotSource</code>, <code>outputFormat?</code>, <code>options?</code>): <code>string</code></p><p>Convenience function that performs the <strong>patchwork</strong> layout, is equivalent to <code>layout(dotSource, outputFormat, &quot;patchwork&quot;);</code>.</p><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dotSource</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Required - graph definition in <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">DOT</a> language</td></tr><tr><td style="text-align:left;"><code>outputFormat</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#format"><code>Format</code></a></td><td style="text-align:left;"><code>&quot;svg&quot;</code></td><td style="text-align:left;">The format of the result.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html"><code>Options</code></a></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Advanced Options for images, files, yInvert and nop.</td></tr></tbody></table><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-hidden="true">#</a></h4><p><code>string</code></p><p>A string containing the calculated layout in the format specified by <code>outputFormat</code></p><h4 id="defined-in-9" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L227" target="_blank" rel="noreferrer">graphviz.ts:227</a></p><hr><h3 id="twopi" tabindex="-1">twopi <a class="header-anchor" href="#twopi" aria-hidden="true">#</a></h3><p>\u25B8 <strong>twopi</strong>(<code>dotSource</code>, <code>outputFormat?</code>, <code>options?</code>): <code>string</code></p><p>Convenience function that performs the <strong>twopi</strong> layout, is equivalent to <code>layout(dotSource, outputFormat, &quot;twopi&quot;);</code>.</p><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dotSource</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Required - graph definition in <a href="https://graphviz.gitlab.io/doc/info/lang.html" target="_blank" rel="noreferrer">DOT</a> language</td></tr><tr><td style="text-align:left;"><code>outputFormat</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/modules/graphviz.html#format"><code>Format</code></a></td><td style="text-align:left;"><code>&quot;svg&quot;</code></td><td style="text-align:left;">The format of the result.</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="/hpcc-js-wasm/interfaces/graphviz.Options.html"><code>Options</code></a></td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;">Advanced Options for images, files, yInvert and nop.</td></tr></tbody></table><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-hidden="true">#</a></h4><p><code>string</code></p><p>A string containing the calculated layout in the format specified by <code>outputFormat</code></p><h4 id="defined-in-10" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a></h4><p><a href="https://github.com/hpcc-systems/hpcc-js-wasm/blob/b892840/src/graphviz.ts#L239" target="_blank" rel="noreferrer">graphviz.ts:239</a></p>`,125),n=[d];function s(l,i,c,h,p,f){return a(),e("div",null,n)}const y=t(r,[["render",s]]);export{u as __pageData,y as default};
